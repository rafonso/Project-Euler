package eulerProject

import Utils._

/**
 * Problem 61: <br/>
 * 16 January 2004<br/>
 * <br/>
 * Triangle, square, pentagonal, hexagonal, heptagonal, and octagonal 
 * numbers are all figurate (polygonal) numbers and are generated by the 
 * following formulae:<br/>
 * <table>
 * <tr><td>Triangle  </td><td> P_(3,n)=n(n+1)/2  </td><td>1, 3, 6, 10, 15, ...  </td></tr>
 * <tr><td>Square    </td><td> P_(4,n)=n^(2)     </td><td>1, 4, 9, 16, 25, ...  </td></tr>
 * <tr><td>Pentagonal</td><td> P_(5,n)=n(3n-1)/2 </td><td>1, 5, 12, 22, 35, ... </td></tr>
 * <tr><td>Hexagonal </td><td> P_(6,n)=n(2n-1)   </td><td>1, 6, 15, 28, 45, ... </td></tr>
 * <tr><td>Heptagonal</td><td> P_(7,n)=n(5n-3)/2 </td><td>1, 7, 18, 34, 55, ... </td></tr>
 * <tr><td>Octagonal </td><td> P_(8,n)=n(3n-2)   </td><td>1, 8, 21, 40, 65, ... </td></tr>
 * </table> 
 * <br/>
 * The ordered set of three 4-digit numbers: 8128, 2882, 8281, has three 
 * interesting properties.<br/>
 * <br/>
 * 1. The set is cyclic, in that the last two digits of each number is the 
 * first two digits of the next number (including the last number with the 
 * first).<br/>
 * 2. Each polygonal type: triangle (P_(3,127)=8128), square (P_(4,91)=8281), 
 * and pentagonal (P_(5,44)=2882), is represented by a different number in the 
 * set.<br/>
 * 3. This is the only set of 4-digit numbers with this property.<br/>
 * <br/>
 * <b>Find the sum of the only ordered set of six cyclic 4-digit numbers for which 
 * each polygonal type: triangle, square, pentagonal, hexagonal, heptagonal, 
 * and octagonal, is represented by a different number in the set.</b>
 * 
 */
object Problem061 {
  
  def getTriangular(n: Int) = n * (n + 1) / 2
  
  def getSquare(n: Int) = n * n
  
  def getPentagonal(n: Int) = n * (3 * n - 1) / 2
  
  def getHexagonal(n: Int) = n * (2 * n - 1)
  
  def getHeptagonal(n: Int) = n * (5 * n - 3) / 2
  
  def getOctagonal(n: Int) = n * (3 * n - 2)
  
  def generateSeries(min: Int, max: Int, formula: Int => Int): List[Int] = {
    (min to max).map(formula(_)).filter(_ >= 1000).takeWhile(_ < 10000).toList
  }
  
  def normalizeNumber(n: Int): Int = n.toString.toList.sort(_ < _).mkString.toInt
  
  def isPermutation(n: Int, normalizedBase: Int): Boolean = (normalizeNumber(n) == normalizedBase)
  
  def getPermutations(n: Int, permutaionList: List[List[Int]], numbers: List[Int]): Option[(Int, List[List[Int]])] = {
    val normalized = normalizeNumber(n)
    val permutations = numbers.filter(isPermutation(_, normalized))
    println(n + " => " + permutations + " => " + permutaionList)
    if(permutations.isEmpty) None
    else Some((n, permutations :: permutaionList ))
  }
  
  def getNext(priorNumbers: List[Int], numbers: List[Int]): Option[List[List[Int]]] = {
    val firstNumber = priorNumbers.first
    val (prefix, suffix) = /%(firstNumber, 100)

    
    None
  }
  
  import scala.collection.immutable._
  
  def main(args : Array[String]) : Unit = {
    val t0 = System.currentTimeMillis
    // n = (-1 + sqrt(1 + 8p)) / 2
    // p = 1000  <--> n = 44
    // p = 10000 <--> n = 141
    val triangulars = generateSeries(44, 142, getTriangular)
    // n = n^2
    // p = 1000  <--> n = 32
    // p = 10000 <--> n = 100
    val squares = generateSeries(32, 100, getSquare)
    // n = (1 + sqrt(1 + 24p)) / 24
    // p = 1000  <--> n = 26
    // p = 10000 <--> n = 82
    val pentagonals = generateSeries(26, 82, getPentagonal)
    /*
    // n = (1 + sqrt(1 + 8p)) / 4
    // p = 1000  <--> n = 22
    // p = 10000 <--> n = 71
    val hexagonals = generateSeries(22, 71, getHexagonal)
    // n = (3 + sqrt(9 + 40p)) / 10
    // p = 1000  <--> n = 20
    // p = 10000 <--> n = 64
    val heptagonals = generateSeries(20, 64, getHeptagonal)
    // n = (1 + sqrt(4 + 12p)/6
    // p = 1000  <--> n = 18
    // p = 10000 <--> n = 57
    val octagonals = generateSeries(18, 183, getOctagonal)
    */
    
    println("triangulars = " + triangulars)
    println("squares = " + squares)
    println("pentagonals = " + pentagonals)
//    println("hexagonals = " + hexagonals)
//    println("heptagonals = " + heptagonals)
//    println("octagonals = " + octagonals)
    
    val add = (mapa: Map[Int, List[List[Int]]], option: (Int, List[List[Int]])) => mapa + option
    
    val result = pentagonals
      .map(getPermutations(_, Nil, squares))
      .filter(_.isDefined)
      .map(_.get)
      .foldLeft(Map.empty[Int, List[List[Int]]])(_ + _)
      // TreeMap.empty[Int, List[List[Int]]])(_ + _)
    
    val deltaT = System.currentTimeMillis - t0
    
    println("==============================")
    println(result)
    println("Total Time: " + deltaT + " ms")
  }
}
