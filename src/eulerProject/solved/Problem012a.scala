package eulerProject.solved

import scala.collection.immutable._

/**
 * Problem 12: What is the value of the first triangle number to have over five hundred divisors?<br>
 * 08 March 2002<br>
 * <br>
 * The sequence of triangle numbers is generated by adding the natural numbers. 
 * So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:<br>
 * <br>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...<br>
 * <br>
 * Let us list the factors of the first seven triangle numbers:<br>
 * <pre>
 *     1: 1
 *     3: 1,3
 *     6: 1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 * </pre>
 * We can see that 28 is the first triangle number to have over five divisors.<br>
 * <br>
 * <b>What is the value of the first triangle number to have over five hundred divisors?<b><br>
 * 
 */
object Problem012a {
  
  def getDivisorsFor(n: Long): Set[Long] = {
    
    val limit = Math.sqrt(n)
    
    def find(candidate: Int, divisors: Set[Long]): Set[Long] = {
      if(candidate > limit) divisors + (1, n)
      else if(n % candidate == 0) find(candidate + 1, divisors + (candidate, (n / candidate)))
      else find(candidate + 1, divisors)
    }
    
    find(2, TreeSet.empty[Long])
  }
  
  def getTriangularNumberWithDivisors(max: Int): Long = {
    
    def evaluate(triangular: Long, n: Int): Long = {
      val divisors = getDivisorsFor(triangular)
      println("t(%,7d) = %,11d => %3d => %s".format(n, triangular, divisors.size, divisors))
      
      if(divisors.size > max) triangular
      else evaluate(triangular + n, n + 1)
    }
    
    evaluate(1, 2)
  }
  
  def main(args : Array[String]) : Unit = {
    val max = 700
    
    val t0 = System.currentTimeMillis
    val result = getTriangularNumberWithDivisors(max)
    val deltaT = System.currentTimeMillis - t0
    
    println("=========================================================")
    println("Result for " + max + " = " + result)
    println("Time = " + deltaT + " ms")
  }
}
