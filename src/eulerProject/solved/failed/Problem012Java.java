/**
 * 
 */
package eulerProject.solved.failed;

import java.util.Arrays;

/**
 * Problem 12: What is the value of the first triangle number to have over five
 * hundred divisors?<br>
 * 08 March 2002<br>
 * <br>
 * The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7^(th) triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The
 * first ten terms would be:<br>
 * <br>
 * 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...<br>
 * <br>
 * Let us list the factors of the first seven triangle numbers:<br>
 * 
 * <pre>
 *      1: 1
 *      3: 1,3
 *      6: 1,2,3,6
 *     10: 1,2,5,10
 *     15: 1,3,5,15
 *     21: 1,3,7,21
 *     28: 1,2,4,7,14,28
 * </pre>
 * 
 * We can see that 28 is the first triangle number to have over five divisors.<br>
 * <br>
 * What is the value of the first triangle number to have over five hundred
 * divisors?<br>
 * 
 * @author rafael
 * 
 * [  11500,   66130750, 128]
 * 
 */
public class Problem012Java {

	private int getQuantityOfDivisors(int n) {
		int quantity = 1;

		for (int i = 1; i <= n / 2; i++) {
			if (n % i == 0) {
				quantity++;
			}
		}

		return quantity;
	}
	
	int getTriangular(int until) {
		int triangular = 0;
		
		for(int i = 1; i <= until; i ++) {
			triangular += i;
		}
		
		return triangular;
	}
	
	
	public int[] findTrangulaNumberWithQtyOfDivisors(int n, int from) {
		int qty = 0;
		int triangular = getTriangular(from - 1);
		int i = from;
		for (; qty < n; i++) {
			triangular += i;
			qty = getQuantityOfDivisors(triangular);
			if (i % 500 == 0) {
				System.out.printf("[%7d, %10d, %3d]%n", i, triangular, qty);
			}
		}

		return new int[] {i, triangular, qty};
	}

	public static void main(String[] args) {
		int n = Integer.parseInt(args[0]);
		int start = Integer.parseInt(args[1]);
		Problem012Java appl = new Problem012Java();

		long t0 = System.currentTimeMillis();
		int[] result = appl.findTrangulaNumberWithQtyOfDivisors(n, start);
		long deltaT = System.currentTimeMillis() - t0;

		System.out.println("RESULT FOR " + n + " DIVISORS = " + Arrays.toString(result));
		System.out.println("Time: " + deltaT + " ms");
	}

}
